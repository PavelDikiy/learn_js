/*-----------------------------------------------------------
Функция-задержка
Напишите функцию delay(f, ms), которая возвращает обёртку вокруг f, задерживающую вызов на ms миллисекунд.

Упрощённо можно сказать, что delay возвращает "задержанный на ms" вариант f.
В примере выше у функции только один аргумент,
 но delay должна быть универсальной: передавать любое количество аргументов и контекст this.
*/

function f(x) {
  alert( x );
}

function delay(func,ms){

return function(){
var _this = this;
var arg = arguments;
setTimeout(function(){
func.apply(_this, arg);
},ms);

}

};

var f1000 = delay(f, 1000);
var f1500 = delay(f, 1500);

f1000("тест"); // выведет "тест" через 1000 миллисекунд
f1500("тест2"); // выведет "тест2" через 1500 миллисекунд

/*------------------------------------------------------------*/
/*
Вызов не чаще чем в N миллисекунд

Напишите функцию debounce(f, ms), которая возвращает обёртку, которая откладывает вызов f на ms миллисекунд.
«Лишние» вызовы перезаписывают предыдущие отложенные задания. Все аргументы и контекст – передаются.
Упрощённо можно сказать, что debounce возвращает вариант f, срабатывающий не чаще чем раз в ms миллисекунд.
*/

function f(x) {
  alert( x );
}

function debounce(func, ms){
var tm = 0;

return function(){
var _this = this;
var arg = arguments;

if(tm){
clearTimeout(tm);
}

tm = setTimeout(function(){
func.apply(_this, arg);
tm=0;
},ms);



}

}
let f2 = debounce(f, 1000);
f2(1);
f2(2);
